#!/bin/bash

####
# AWS stuff
####
# https://github.com/kohofinancial/documentation/blob/master/onboarding/How-Tos/RDS%20Connection.md

# Print available AWS Role Profiles
alias 'aws_profiles=egrep "^\[.+\]$" ~/.aws/config | awk -F"[\\\\[\\\\]]" "{print \$2}" | awk -F" " "{print \$NF}"'

alias 'ap=aws_profiles'
alias 'pgp=get_pg_password'

function aap() {
    if [[ "$1" == "" ]]
    then
        echo -e "Error: MFA Code not supplied\n\nUsage: aap mfa_code [profile]"
        return 1
    else
        MFA_CODE=$1
    fi

    if [[ "$2" == "" ]]
    then
        PROFILE="production"
    else
        PROFILE=$2
    fi

    echo "running . aws_assume_profile --clean --profile $PROFILE -m $MFA_CODE"
    . aws_assume_profile --clean --profile $PROFILE -m $MFA_CODE
}

function get_pg_password() {
    DB_ENV=$1
    MFA_CODE=$2

    if [[ $DB_ENV == "kohoapi-read-prod" ]]
    then
        export RDSHOST="kohoapi-prod-cluster.cluster-ro-csjphcki1km6.us-west-2.rds.amazonaws.com"
        export USER="koho_reader"
        export DBNAME="koho"

    elif [[ $DB_ENV == "kohoapi-write-sandbox" ]]
    then
        export RDSHOST="kohoapi-sandbox.cluster-cxjg1fdxhsr5.us-west-2.rds.amazonaws.com"
        export USER="koho_script_runner"
        export DBNAME="koho"

    elif [[ $DB_ENV == "kohoapi-write-staging" ]]
    then
        export RDSHOST="kohoapi.internaldb.stg-koho.ca"
        export USER="koho_script_runner"
        export DBNAME="kohodev"

    elif [[ $DB_ENV == "processors-read-prod" ]]
    then
        export RDSHOST="processors-prod-aurora-cluster.cluster-ro-csjphcki1km6.us-west-2.rds.amazonaws.com"
        export USER="koho_reader"
        export DBNAME="processors"

    elif [[ $DB_ENV == "processors-write-sandbox" ]]
    then
        export RDSHOST="processors-sandbox.cxjg1fdxhsr5.us-west-2.rds.amazonaws.com"
        export USER="processors_script_runner"
        export DBNAME="processors"

    elif [[ $DB_ENV == "processors-read-staging" ]]
    then
        export RDSHOST="processors-staging.cxjg1fdxhsr5.us-west-2.rds.amazonaws.com"
        export USER="processors_reader"
        export DBNAME="processors"

    elif [[ $DB_ENV == "savings-prod-read" ]]
    then
        export RDSHOST="savings-prod.csjphcki1km6.us-west-2.rds.amazonaws.com"
        export USER="savings_reader"
        export DBNAME="savings"

    elif [[ $DB_ENV == "savings-sandbox-write" ]]
    then
        export RDSHOST="savings-sandbox.cxjg1fdxhsr5.us-west-2.rds.amazonaws.com"
        export USER="savings_script_runner"
        export DBNAME="savings"

    elif [[ $DB_ENV == "savings-staging-write" ]]
    then
        export RDSHOST="savings-staging.cxjg1fdxhsr5.us-west-2.rds.amazonaws.com"
        export USER="savings_script_runner"
        export DBNAME="savings"

    elif [[ $DB_ENV == "eventrecorder-prod-read" ]]
    then
        export RDSHOST="ke12nx8owuo4hze.csjphcki1km6.us-west-2.rds.amazonaws.com"
        export USER="eventrecorder_reader"
        export DBNAME="EventStore"

    else
        1>&2 echo "Error: environment '$DB_ENV' not recognized"
        return 1
    fi

    # If DB server is reached via a bastion box dig for it's IP address
    if [[ $DB_ENV != "kohoapi-read-prod" ]]
    then
        export DB_IP=$(dig +short $RDSHOST | grep -Eo '[0-9\.]{7,15}' | head -1)
    fi

    # Prompts for MFA code
    . aws_assume_profile --clean --profile tide -m $MFA_CODE && \
    . aws_assume_profile --profile $DB_ENV && \
    export PGPASSWORD=$(aws rds generate-db-auth-token --hostname $RDSHOST --port 5432 --region us-west-2 --username $USER) && \
    echo $PGPASSWORD
}

function d_logs() {
    if [[ "$1" == "" ]]
    then
        SERVICE=$DEFAULT_KOHO_API_SERVICE
    else
        SERVICE="$1"
    fi
    docker logs -n 10 -f koho_${SERVICE}_1 | jq .msg
}

####
# Koho API stuff
####
# Local Postgres DB password
export PGPASSWORD="apple.banana.cherry"

# For fixing Docker when it's in a bad state
alias 'd_nuke=docker kill $(docker ps -q); docker container prune -f && docker rmi -f $(docker images -qa) && docker volume prune -f && docker network prune -f'

# Prevent timeout errors on make start
export DOCKER_CLIENT_TIMEOUT=120
export COMPOSE_HTTP_TIMEOUT=180

# Application stuff
alias print_products='egrep "^\tProduct.+ProductID = " project/src/shared/accounts/products/products/contracts.go | awk "{print \$4,\$1}" | sort -n'
export DEFAULT_SERVICE="koho_accounts-api_1"
alias d_logs='docker logs -f -n 10 $DEFAULT_SERVICE 2> /dev/null'

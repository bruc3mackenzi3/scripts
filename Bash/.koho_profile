export DEFAULT_KOHO_API_SERVICE="accounts-api"

function get_pg_password() {
    DB_ENV=$1

    if [[ $DB_ENV == "kohoapi-read-prod" ]]
    then
        export RDSHOST="postgres-9-6-prod-v2-replica.csjphcki1km6.us-west-2.rds.amazonaws.com"
        export USER="koho_reader"
        export DBNAME="koho"
    elif [[ $DB_ENV == "kohoapi-read-sandbox" ]]
    then
        export RDSHOST="kohoapi-sandbox.cxjg1fdxhsr5.us-west-2.rds.amazonaws.com"
        export USER="koho_reader"
        export DBNAME="koho"
    elif [[ $DB_ENV == "processors-read-prod" ]]
    then
        export RDSHOST="processors-prod.csjphcki1km6.us-west-2.rds.amazonaws.com"
        export USER="processors_reader"
        export DBNAME="processors"
    elif [[ $DB_ENV == "processors-read-sandbox" ]]
    then
        export RDSHOST="processors-sandbox.cxjg1fdxhsr5.us-west-2.rds.amazonaws.com"
        export USER="processors_reader"
        export DBNAME="processors"
    elif [[ $DB_ENV == "processors-read-staging" ]]
    then
        export RDSHOST="processors-staging.cxjg1fdxhsr5.us-west-2.rds.amazonaws.com"
        export USER="processors_reader"
        export DBNAME="processors"
    else
        1>&2 echo "Error: environment '$DB_ENV' not recognized"
        return 1
    fi

    # If DB server is reached via a bastion box dig for it's IP address
    if [[ $DB_ENV != "kohoapi-read-prod" ]]
    then
        export DB_IP=$(dig +short $RDSHOST | grep -Eo '[0-9\.]{7,15}' | head -1)
    fi

    # Prompts for MFA code
    . aws_assume_profile --clean --profile tideteam && \
    . aws_assume_profile --profile $DB_ENV && \
    export PGPASSWORD=$(aws rds generate-db-auth-token --hostname $RDSHOST --port 5432 --region us-west-2 --username $USER) && \
    echo $PGPASSWORD
}

function d_logs() {
    if [[ "$1" == "" ]]
    then
        SERVICE=$DEFAULT_KOHO_API_SERVICE
    else
        SERVICE="$1"
    fi
    docker logs -n 10 -f koho_${SERVICE}_1 | jq .msg
}

# Koho API stuff
# For fixing Docker when it's in a bad state
alias 'd_nuke=docker kill $(docker ps -q); docker container prune -f && docker rmi -f $(docker images -qa) && docker volume prune -f && docker network prune -f'

# Print available AWS Role Profiles
alias 'aws_profiles=egrep "^\[.+\]$" ~/.aws/config | awk -F"[\\\\[\\\\]]" "{print \$2}" | awk -F" " "{print \$NF}"'

alias 'ap=aws_profiles'
alias 'aap=. aws_assume_profile'
alias 'pgp=get_pg_password'
